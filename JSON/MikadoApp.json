{
  "name": "Mikado",
  "shortDescription": "Identification of expressed loci from RNA-Seq data \n main pipeline",
  "longDescription": "Identification of expressed loci from RNA-Seq data \n main pipeline",
  "helpURI": "http://mikado.readthedocs.io/en/latest/",
  "datePublished": "",
  "author": "Alice Minotto",
  "version": "0.1.0",
  "deploymentSystem": "cyverseUK-Storage2",
  "deploymentPath": "/mnt/data/rosysnake/Mikado",
  "executionSystem": "cyverseUK-Batch2",
  "executionType": "CLI",
  "parallelism": "SERIAL",
  "templatePath": "wrapper.sh",
  "testPath": "test.sh",
  "tags": [  ],
  "ontology": [ "http://edamontology.org/operation_0362",
  "http://edamontology.org/operation_0264",
  "http://edamontology.org/operation_0436",
  "http://edamontology.org/operation_0433",
  "http://edamontology.org/topic_3512",
  "http://edamontology.org/topic_3320" ],
  "inputs": [
    {"id": "reference",
    "value": {
      "required": true,
      "default": ""
    },
    "details": { "label": "Genome FASTA file",
      "showArgument": false
    },
    "semantics": {
      "maxCardinality": 1
    }},
    {"id": "gff",
    "value": {
      "required": true,
      "default": ""
      },
    "details": { "label": "Input GFF/GTF file(s).",
      "showArgument": false
    },
    "semantics": {
      "maxCardinality": -1
      }},
      {
        "id": "list",
        "value":{
          "required": false
        },
        "details":{
          "label": "mutation file",
          "description": "List of the inputs, one by line, in the form: \n file1  label  strandedness(true/false)",
          "showArgument": false
        },
        "semantics": {
          "maxCardinality": 1
        }
      },
      {
        "id": "scoring_file",
        "value": {
          "required": false,
          "validator": "^*\\.yaml$"
        },
        "details": {
          "label": "scoring file [yaml extension]",
          "showArgument": false
        },
        "semantics": {
          "maxCardinality": 1
        }
      },
      {
        "id": "junction_file",
        "value": {
          "required": false
        },
        "details": {
          "label": ".bed file with splicing junctions",
          "showArgument": false
        }
      },
      {
        "id": "bt_file",
        "value": {
          "required": false
        },
        "details": {
          "label": "blast databasefor deriving homology informations"
        }
      },
      {
        "id": "orfs",
        "value": {
          "required": true,
          "default": ""
        },
        "details":{
          "label": "ORF BED file(s)"
        },
        "semantics": {
          "maxCardinality": -1

        }
      }
    ],


  "parameters": [
    {"id": "con_full",
    "value": {
      "type": "flag",
      "visible": true
    },
    "details": {
      "label" : "full",
      "showArgument": true,
      "argument": "--full "
      }},
    {"id": "con_labels",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\S*$"
      },
    "details": {
      "label": "label",
      "description": "Labels to attach to the IDs of the transcripts of the input files, separated by comma.",
      "showArgument": true,
      "argument": "--labels "
      }},
    {"id": "con_mode",
      "value": {
        "type": "enumeration",
        "enumValues": [ "nosplit",
        "stringent",
        "lenient",
        "permissive",
        "split"],
        "visible": true,
        "default": "permissive"
      },
      "details": {
        "label": "configure mode",
        "description": "Mode in which Mikado will treat transcripts with multiple ORFs. \n - nosplit: keep the transcripts whole. \n - stringent: split multi-orf transcripts if two consecutive ORFs have both BLAST hits and none of those hits is against the same target. \n - lenient: split multi-orf transcripts as in stringent, and additionally, also when either of the ORFs lacks a BLAST hit (but not both). \n - permissive: like lenient, but also split when both ORFs lack BLAST hits \n - split: split multi-orf transcripts regardless of what BLAST data is available.",
        "showArgument": true,
        "argument": "--mode "
      }
    },
    {"id": "con_scoring",
      "value": {
        "type": "string",
        "visible": true
      },
      "details": {
        "label": "scoring file",
        "description": "If no file was uploaded by the user {plants.yaml,human.yaml,insects.yaml,worm.yaml} are the available scoring files",
        "showArgument": true,
        "argument": "--scoring "
      }
    },
    {"id": "all_strand_spec",
    "value": {
      "type": "flag",
      "visible": true
    },
    "details": {
      "label": "strand specific",
      "description": "Boolean flag indicating whether all the assemblies are strand-specific.",
      "showArgument": true,
      "argument": "--strand-specific "
    }
    },
    {"id": "con_strand_spec",
    "value": {
      "type": "string",
      "visible": true
      },
    "details": {
      "label": "strand specific assemblies",
      "description": "List of strand-specific assemblies among the inputs.",
      "showArgument": true,
      "argument": "--strand-specific-assemblies "
      },
      "semantics": {
        "Cardinality": 1
      }
    },
    {"id": "ser_max_reg",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d*$"
      },
    "details": {
      "label": "max regression",
      "description": "Amount of sequence in the ORF (in %) to backtrack in order to find a valid START codon, if one is absent.",
      "showArgument": true,
      "argument": "--max-regression "
      }
    },
    {"id":"ser_max_tseq",
    "value": {
      "type":"number",
      "visible": true,
      "validator": "^\\d*$",
      "default": 5
      },
    "details": {
      "label": "max target sequences",
      "description": "Maximum number of target sequences.",
      "showArgument": true,
      "argument": "--max_target_seqs "
      }
    },
    {"id":"ser_discard",
    "value":{
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "discard definition",
      "description": "Flag. If set, the sequences IDs instead of their definition will be used for serialisation.",
      "showArgument": true,
      "argument": "--discard-definition "
      }
    },
    {"id": "ser_log_lev",
    "value": {
      "type": "enumeration",
      "visible": true,
      "enumValues": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR"
      ],
      "default": "INFO"
      },
    "details": {
      "label": "log level of serialise step",
      "description": "Log level. Default: INFO",
      "showArgument": true,
      "argument": "--log_level "
      }
    },
    {"id": "pick_monout",
    "value": {
      "type": "string",
      "visible": true
      },
    "details": {
      "label": "monoloci output",
      "showArgument": true,
      "argument": "--monoloci_out "
      }
    },
    {"id": "pick_prefix",
    "value": {
      "type": "string",
      "visible": true,
      "default": "Mikado"
      },
    "details": {
      "label": "prefix",
      "description": "Prefix for the genes. Default: Mikado",
      "showArgument": true,
      "argument": "--prefix "
      }
    },
    {"id": "pick_no_cds",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "no cds",
      "description": "Flag. If set, not CDS information will be printed out in the GFF output files.",
      "showArgument": true,
      "argument": "--no_cds "
      }
    },
    {"id": "pick_flank",
    "value": {
      "type": "string",
      "visible": true,
      "validator": "^\\d*$"
      },
    "details": {
      "label": "flanking distance",
      "description": "Flanking distance (in bps) to group non-overlapping transcripts into a single superlocus.",
      "showArgument": true,
      "argument": "--flank "
      }
    },
    {"id": "pick_purge",
    "value": {
      "type": "flag",
      "visible": true
      },
    "details": {
      "label": "purge",
      "description": " Flag. If set, the pipeline will suppress any loci whose transcripts do not pass the requirements set in the JSON file.",
      "showArgument": true,
      "argument": "--purge "
      }
    },
    {"id": "pick_verbosity",
    "value": {
      "type": "enumeration",
      "enumValues": [
        "--verbose ",
        "--noverbose "
      ],
      "visible": true
      },
    "details": {
      "label": "verbosity of pick step",
      "description": "if --verbose is set the DEBUG mode will be activated",
      "showArgument": false
      }
    },
    {"id": "pick_log_lev",
    "value": {
      "type": "enumeration",
      "enumValues": [
        "DEBUG",
        "INFO",
        "WARN",
        "ERROR",
        "CRITICAL"
      ],
      "visible": true
      },
    "details": {
      "label": "log level of pick step",
      "description": "Log level",
      "showArgument": true,
      "argument": "--log-level "
      }
    }
]
}
